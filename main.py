from config.configvalidator import ConfigValidator
from client.client import Client
from utils.logger import logger
import asyncio
import json


async def main():
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞...\n")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        logger.info("‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...\n")
        validator = ConfigValidator("config/settings.json", "config/wallets.txt")
        settings, wallets = await validator.validate_config()

        with open("constants/networks_data.json", "r", encoding="utf-8") as file:
            networks_data = json.load(file)
        with open("constants/tokens.json", "r", encoding="utf-8") as file:
            tokens = json.load(file)
        network = networks_data[settings["network"]]
        token_addresses = tokens[settings["network"]]

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        client = Client(
            rpc_url=network["rpc_url"],
            chain_id=network["chain_id"],
            explorer_url=network["explorer_url"],
            multicall_address=network["multicall_address"]
        )
        wallets_checksum = await client.to_checksum_list(wallets)

        # –ó–∞–ø—É—Å–∫ —Ñ–µ—Ç—á–∞
        logger.info("‚öôÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤...\n")
        balances = await client.fetch_balances(token_addresses, wallets_checksum)
        if balances:
            for wallet, tokens in balances.items():
                formatted = ", ".join([f"{symbol}: {value:.4f}" for symbol, value in tokens.items()])
                print(f"{wallet} ‚Üí {formatted}")
            logger.info("‚úÖ –ë–∞–ª–∞–Ω—Å—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã.\n")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤.")
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—É—Ç–∏: {e}")


if __name__ == "__main__":
    asyncio.run(main())
